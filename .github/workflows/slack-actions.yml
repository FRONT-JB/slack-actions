name: Slack notification for Pull Request

on:
  pull_request:
    types: [opened, reopened, closed, edited, ready_for_review]
  pull_request_review:
    types: [submitted, edited, dismissed]
  issue_comment:
    types: [created, edited, deleted]

jobs:
  slack_notification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure Git
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install curl jq

      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: "C054MTB7FHD"
        run: |
          # Get the pull request data
          PR_TITLE=$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")
          PR_BODY=$(jq -r '.pull_request.body' "$GITHUB_EVENT_PATH")
          PR_COMMITS=$(jq -r '.pull_request.commits' "$GITHUB_EVENT_PATH")
          PR_CREATED=$(jq -r '.pull_request.created_at' "$GITHUB_EVENT_PATH")
          PR_URL=$(jq -r '.pull_request.html_url' "$GITHUB_EVENT_PATH")

          # Get the sender and user mapping
          SENDER=$(jq -r '.sender.login' "$GITHUB_EVENT_PATH")
          USER_MAPPING=$(cat .github/user_mapping.json)

          # Get the review data
          if [ "$GITHUB_EVENT_NAME" = "pull_request_review" ]; then
            REVIEW_STATE=$(jq -r '.review.state' "$GITHUB_EVENT_PATH")
            REVIEW_BODY=$(jq -r '.review.body' "$GITHUB_EVENT_PATH")
            REVIEW_URL=$(jq -r '.review.html_url' "$GITHUB_EVENT_PATH")
          fi

          # Build the message
          MESSAGE="*New Pull Request:* <$PR_URL|$PR_TITLE>\n"
          MESSAGE+="*$PR_CREATED* by <@$SENDER>\n"
          MESSAGE+="*$PR_COMMITS commits*\n\n"
          MESSAGE+="$PR_BODY\n\n"

          # If it's a review, add the review data
          if [ "$GITHUB_EVENT_NAME" = "pull_request_review" ]; then
            MESSAGE+="*New Review:* <$REVIEW_URL|$REVIEW_STATE> by <@$SENDER>\n"
            MESSAGE+="$REVIEW_BODY"
          fi

          # Map the GitHub usernames to Slack usernames
          for USER in $(echo "$USER_MAPPING" | jq -r '. | keys | .[]'); do
            SLACK_USERNAME=$(echo "$USER_MAPPING" | jq -r --arg user "$USER" '.[$user]')
            MESSAGE=$(echo "$MESSAGE" | sed "s/@$USER/@$SLACK_USERNAME/g")
          done

          # Send the message to Slack
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"$MESSAGE\"}" $SLACK_WEBHOOK_URL

          # If it's a review, add a comment to the Slack thread
          if [ "$GITHUB_EVENT_NAME" = "pull_request_review" ]; then
            SLACK_THREAD_INFO=$(curl -s -X GET -H 'Content-type: application/json' --data "{\"channel\": \"$SLACK_CHANNEL\", \"ts\": \"$SLACK_THREAD_TS\", \"inclusive\": true}" -H "Authorization: Bearer $SLACK_BOT_TOKEN" "https://slack.com/api/conversations.history")
            THREAD_TS=$(echo "$SLACK_THREAD_INFO" | jq -r '.messages[0].ts')
            if [ "$THREAD_TS" = "null" ]; then
              THREAD_TS=$(curl -s -X POST -H 'Content-type: application/json' --data "{\"text\": \"*$PR_TITLE*\", \"channel\": \"$SLACK_CHANNEL\"}" $SLACK_WEBHOOK_URL | jq -r '.ts')
              curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"<$PR_URL|Pull Request> has received a review by <@$SENDER>\", \"channel\": \"$SLACK_CHANNEL\", \"thread_ts\": \"$THREAD_TS\"}" $SLACK_WEBHOOK_URL
            fi
            COMMENT="*$REVIEW_STATE* by <@$SENDER>\n"
            COMMENT+="$REVIEW_BODY"
            curl -s -X POST -H 'Content-type: application/json' --data "{\"text\": \"$COMMENT\", \"thread_ts\": \"$SLACK_THREAD_TS\", \"channel\": \"$SLACK_CHANNEL\"}"
          fi
